// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thingy.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Thingy {
  public static class ThingyService
  {
    static readonly string __ServiceName = "thingy.ThingyService";

    static readonly Marshaller<global::Thingy.GetThingyRequest> __Marshaller_GetThingyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Thingy.GetThingyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Thingy.Thingy> __Marshaller_Thingy = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Thingy.Thingy.Parser.ParseFrom);

    static readonly Method<global::Thingy.GetThingyRequest, global::Thingy.Thingy> __Method_GetThingy = new Method<global::Thingy.GetThingyRequest, global::Thingy.Thingy>(
        MethodType.Unary,
        __ServiceName,
        "GetThingy",
        __Marshaller_GetThingyRequest,
        __Marshaller_Thingy);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Thingy.ThingyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ThingyService</summary>
    public abstract class ThingyServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Thingy.Thingy> GetThingy(global::Thingy.GetThingyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ThingyService</summary>
    public class ThingyServiceClient : ClientBase<ThingyServiceClient>
    {
      /// <summary>Creates a new client for ThingyService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ThingyServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ThingyService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ThingyServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ThingyServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ThingyServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Thingy.Thingy GetThingy(global::Thingy.GetThingyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetThingy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Thingy.Thingy GetThingy(global::Thingy.GetThingyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetThingy, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Thingy.Thingy> GetThingyAsync(global::Thingy.GetThingyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetThingyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Thingy.Thingy> GetThingyAsync(global::Thingy.GetThingyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetThingy, null, options, request);
      }
      protected override ThingyServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ThingyServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ThingyServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetThingy, serviceImpl.GetThingy).Build();
    }

  }
}
#endregion
